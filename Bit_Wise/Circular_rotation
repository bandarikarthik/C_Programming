#include <stdio.h>
#include <stdint.h>

#define ROTATION_INBITS       8  //you can customised for 8,16,32,bits 
#define LEFT                  3
#define VALUE               0xAA   //give the value accordingly 1,2,4,bytes...
int main()
{
  
  uint32_t given_number = VALUE,total_bits=ROTATION_INBITS,temp,circular_left = LEFT,result,result1,final,final2;
  printf("original bits \t\t  ");
  for(uint8_t rotation = ROTATION_INBITS - 1;rotation < total_bits; rotation--)
  {
    temp = (given_number & (1 << rotation));
    if(temp)printf("1");
        else printf("0");
  
  }
  printf("\n");

 final = (given_number >> (total_bits - circular_left)) | (given_number << circular_left);
  printf("after left rotation bits  ");
   for(uint8_t rotation = ROTATION_INBITS - 1;rotation < total_bits; rotation--)
  {
    temp = (final & (1 << rotation));
    if(temp)printf("1");
        else printf("0");
  
  }
   printf("\n");

 final2 = (given_number << (total_bits - circular_left)) | (given_number >> circular_left);  //just interchange the shift operator 
  printf("after right rotation bits ");
   for(uint8_t rotation = ROTATION_INBITS - 1;rotation < total_bits; rotation--)
  {
    temp = (final2 & (1 << rotation));
    if(temp)printf("1");
        else printf("0");
  
  } 
  
  

}
